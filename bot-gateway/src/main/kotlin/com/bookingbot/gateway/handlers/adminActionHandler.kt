package com.bookingbot.gateway.handlers

import com.bookingbot.api.services.BookingService
import com.bookingbot.api.services.ClubService
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode

fun addAdminActionHandler(dispatcher: Dispatcher, bookingService: BookingService, clubService: ClubService) {
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "—Å–ª—É—à–∞–µ—Ç" –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Å–µ inline-–∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç –±–æ—Ç
    dispatcher.callbackQuery {
        val data = callbackQuery.data
        val message = callbackQuery.message ?: return@callbackQuery
        val chatId = message.chat.id
        val messageId = message.messageId

        when {
            // –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "admin_confirm_"
            data.startsWith("admin_confirm_") -> {
                val bookingId = data.removePrefix("admin_confirm_").toInt()
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ "SEATED" (–≥–æ—Å—Ç–∏ –ø—Ä–∏—à–ª–∏)
                bookingService.updateBookingStatus(bookingId, "SEATED")

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ, –¥–æ–±–∞–≤–ª—è—è –æ—Ç–º–µ—Ç–∫—É –∏ —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
                bot.editMessageText(
                    chatId = ChatId.fromId(chatId), // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û
                    messageId = messageId,
                    text = message.text + "\n\n‚úÖ –ì–æ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ.",
                    parseMode = ParseMode.MARKDOWN,
                    replyMarkup = null // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
                )
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
                bot.answerCallbackQuery(callbackQuery.id, text = "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ì–æ—Å—Ç–∏ –ø—Ä–∏—à–ª–∏.")
            }

            // –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "admin_noshow_"
            data.startsWith("admin_noshow_") -> {
                val bookingId = data.removePrefix("admin_noshow_").toInt()
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ "NO_SHOW" (–Ω–µ—è–≤–∫–∞)
                bookingService.updateBookingStatus(bookingId, "NO_SHOW")

                bot.editMessageText(
                    chatId = ChatId.fromId(chatId), // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û
                    messageId = messageId,
                    text = message.text + "\n\n‚ùå –ù–µ—è–≤–∫–∞.",
                    parseMode = ParseMode.MARKDOWN,
                    replyMarkup = null
                )
                bot.answerCallbackQuery(callbackQuery.id, text = "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ù–µ—è–≤–∫–∞.")
            }

            data.startsWith("admin_cancel_") -> {
                val bookingId = data.removePrefix("admin_cancel_").toInt()
                val bookingToCancel = bookingService.findBookingById(bookingId) // –ù–∞—Ö–æ–¥–∏–º –±—Ä–æ–Ω—å –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π

                if (bookingToCancel != null && bookingService.cancelBookingByStaff(bookingId)) {
                    bot.editMessageText(
                        chatId = ChatId.fromId(chatId),
                        messageId = messageId,
                        text = message.text + "\n\nüö´ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                        parseMode = ParseMode.MARKDOWN,
                        replyMarkup = null
                    )
                    bot.answerCallbackQuery(callbackQuery.id, text = "–ë—Ä–æ–Ω—å ‚Ññ$bookingId –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                    // <<< –ù–ê–ß–ê–õ–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—é
                    val club = clubService.findClubById(bookingToCancel.clubId)
                    val guestNotificationText = """
                        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –±—Ä–æ–Ω—å ‚Ññ${bookingToCancel.id} –≤ –∫–ª—É–±–µ *${club?.name ?: "N/A"}* –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.
                        
                        –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª—É–±–æ–º.
                    """.trimIndent()

                    bot.sendMessage(
                        chatId = ChatId.fromId(bookingToCancel.userId),
                        text = guestNotificationText,
                        parseMode = ParseMode.MARKDOWN
                    )
                    // <<< –ö–û–ù–ï–¶: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—é

                } else {
                    bot.answerCallbackQuery(callbackQuery.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å.", showAlert = true)
                }
            }

            // –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "admin_cancel_"
            data.startsWith("admin_cancel_") -> {
                val bookingId = data.removePrefix("admin_cancel_").toInt()
                // –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                if (bookingService.cancelBookingByStaff(bookingId)) {
                    bot.editMessageText(
                        chatId = ChatId.fromId(chatId), // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û
                        messageId = messageId,
                        text = message.text + "\n\nüö´ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                        parseMode = ParseMode.MARKDOWN,
                        replyMarkup = null
                    )
                    bot.answerCallbackQuery(callbackQuery.id, text = "–ë—Ä–æ–Ω—å ‚Ññ$bookingId –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—é –æ–± –æ—Ç–º–µ–Ω–µ –µ–≥–æ –±—Ä–æ–Ω–∏
                } else {
                    bot.answerCallbackQuery(callbackQuery.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å.", showAlert = true)
                }
            }
        }
    }
}
