package com.bookingbot.gateway.handlers

import com.bookingbot.api.model.booking.BookingRequest
import com.bookingbot.api.services.BookingService
import com.bookingbot.api.services.ClubService
import com.bookingbot.api.services.TableService
import com.bookingbot.gateway.fsm.State
import com.bookingbot.gateway.fsm.StateStorage
import com.bookingbot.gateway.markup.CalendarKeyboard
import com.bookingbot.gateway.markup.Menus
import com.bookingbot.gateway.util.StateFilter
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.extensions.filters.Filter
import java.time.LocalDate
import java.time.ZoneId
import java.time.format.DateTimeFormatter

fun addBookingHandlers(
    dispatcher: Dispatcher,
    clubService: ClubService,
    tableService: TableService,
    bookingService: BookingService
) {

    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–í—ã–±—Ä–∞—Ç—å –∫–ª—É–±"
    dispatcher.callbackQuery("select_club") {
        val chatId = ChatId.fromId(callbackQuery.message!!.chat.id)
        val clubs = clubService.getAllClubs()
        val clubButtons = clubs
            .map { InlineKeyboardButton.CallbackData(it.name, "show_club_${it.id}") }
            .chunked(2)
        bot.sendMessage(
            chatId,
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            replyMarkup = InlineKeyboardMarkup.create(clubButtons)
        )
    }

    // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    dispatcher.callbackQuery {
        val chatId = ChatId.fromId(callbackQuery.message!!.chat.id)
        val data = callbackQuery.data

        when {
            // –®–∞–≥ 2: –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–ª—É–±–∞
            data.startsWith("show_club_") -> {
                val clubId = data.removePrefix("show_club_").toIntOrNull() ?: return@callbackQuery
                val club = clubService.findClubById(clubId) ?: return@callbackQuery
                bot.sendMessage(
                    chatId = chatId,
                    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: *${club.name}*",
                    parseMode = ParseMode.MARKDOWN,
                    replyMarkup = Menus.clubMenu(clubId)
                )
            }

            // –®–∞–≥ 3: –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
            data.startsWith("start_booking_") -> {
                val clubId = data.removePrefix("start_booking_").toIntOrNull() ?: return@callbackQuery
                StateStorage.getContext(chatId.id).clubId = clubId
                StateStorage.setState(chatId.id, State.DateSelection)
                val today = LocalDate.now()
                bot.sendMessage(
                    chatId = chatId,
                    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    replyMarkup = CalendarKeyboard.create(today.year, today.monthValue)
                )
            }

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            data.startsWith("calendar_prev_") || data.startsWith("calendar_next_") -> {
                val parts = data.split("_")
                val direction = parts[1]
                val yearMonth = java.time.YearMonth.parse(parts[2])
                val newYM = if (direction == "prev") yearMonth.minusMonths(1) else yearMonth.plusMonths(1)
                bot.editMessageReplyMarkup(
                    chatId = chatId,
                    messageId = callbackQuery.message!!.messageId,
                    replyMarkup = CalendarKeyboard.create(newYM.year, newYM.monthValue)
                )
            }

            // –í—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            data.startsWith("calendar_day_") -> {
                if (StateStorage.getState(chatId.id) != State.DateSelection.key) return@callbackQuery
                val date = LocalDate.parse(data.removePrefix("calendar_day_"))
                StateStorage.getContext(chatId.id).bookingDate =
                    date.atStartOfDay(ZoneId.systemDefault()).toInstant()
                StateStorage.setState(chatId.id, State.GuestCountInput)
                bot.deleteMessage(chatId, callbackQuery.message!!.messageId)
                bot.sendMessage(chatId, text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: $date. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?")
            }

            // –®–∞–≥ 6: –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
            data.startsWith("table_") -> {
                if (StateStorage.getState(chatId.id) != State.TableSelection.key) return@callbackQuery
                val tableId = data.removePrefix("table_").toInt()
                val ctx = StateStorage.getContext(chatId.id)
                ctx.tableId = tableId

                val club = clubService.findClubById(ctx.clubId!!)
                val fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy").withZone(ZoneId.systemDefault())
                val text = """
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –±—Ä–æ–Ω—å:
                    - *–ö–ª—É–±:* ${club?.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
                    - *–°—Ç–æ–ª ID:* ${ctx.tableId}
                    - *–ì–æ—Å—Ç–µ–π:* ${ctx.guestCount}
                    - *–î–∞—Ç–∞:* ${fmt.format(ctx.bookingDate!!)}
                """.trimIndent()
                val buttons = InlineKeyboardMarkup.create(
                    listOf(
                        InlineKeyboardButton.CallbackData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_booking"),
                        InlineKeyboardButton.CallbackData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_booking_fsm")
                    )
                )
                StateStorage.setState(chatId.id, State.Confirmation)
                bot.editMessageText(
                    chatId = chatId,
                    messageId = callbackQuery.message!!.messageId,
                    text = text,
                    replyMarkup = buttons,
                    parseMode = ParseMode.MARKDOWN
                )
            }

            // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            data == "confirm_booking" -> {
                if (StateStorage.getState(chatId.id) != State.Confirmation.key) return@callbackQuery
                val ctx = StateStorage.getContext(chatId.id)
                val request = BookingRequest(
                    userId = chatId.id,
                    clubId = ctx.clubId!!,
                    tableId = ctx.tableId!!,
                    bookingTime = ctx.bookingDate!!,
                    partySize = ctx.guestCount!!,
                    bookingGuestName = ctx.bookingGuestName,
                    promoterId = ctx.promoterId,
                    source = ctx.source ?: "–ë–æ—Ç",
                    phone = ctx.phone,
                    telegramId = chatId.id
                )
                val booking = bookingService.createBooking(request)

                // 1) –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.editMessageText(
                    chatId = chatId,
                    messageId = callbackQuery.message!!.messageId,
                    text = "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –±—Ä–æ–Ω—å ‚Ññ${booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                )

                // 2) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–ª—É–±–∞
                val club = clubService.findClubById(ctx.clubId!!)
                club?.adminChannelId?.let { channelId ->
                    val fmtDateTime = DateTimeFormatter
                        .ofPattern("dd.MM.yyyy HH:mm")
                        .withZone(ZoneId.systemDefault())
                    val notifyText = """
                        üîî *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å!*

                        *ID –±—Ä–æ–Ω–∏:* ${booking.id}
                        *–ì–æ—Å—Ç—å:* @${booking.bookingGuestName ?: "N/A"}
                        *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:* ${booking.partySize}
                        *–°—Ç–æ–ª ID:* ${booking.tableId}
                        *–í—Ä–µ–º—è:* ${fmtDateTime.format(booking.bookingTime)}
                    """.trimIndent()
                    val adminButtons = InlineKeyboardMarkup.create(
                        listOf(
                            InlineKeyboardButton.CallbackData("‚úÖ –ì–æ—Å—Ç–∏ –ø—Ä–∏—à–ª–∏", "admin_confirm_${booking.id}"),
                            InlineKeyboardButton.CallbackData("‚ùå –ù–µ—è–≤–∫–∞", "admin_noshow_${booking.id}")
                        )
                    )
                    bot.sendMessage(
                        chatId = ChatId.fromId(channelId),
                        text = notifyText,
                        parseMode = ParseMode.MARKDOWN,
                        replyMarkup = adminButtons
                    )
                }

                StateStorage.clear(chatId.id)
            }

            // –û—Ç–º–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ FSM
            data == "cancel_booking_fsm" -> {
                bot.editMessageText(
                    chatId = ChatId.fromId(callbackQuery.message!!.chat.id),
                    messageId = callbackQuery.message!!.messageId,
                    text = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                )
                StateStorage.clear(chatId.id)
            }
        }
    }

    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
    dispatcher.message(Filter.Text and StateFilter(State.GuestCountInput.key)) {
        val chatId = ChatId.fromId(message.chat.id)
        val count = message.text?.toIntOrNull()
        if (count == null || count <= 0) {
            bot.sendMessage(chatId, text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π.")
            return@message
        }
        StateStorage.getContext(chatId.id).guestCount = count
        StateStorage.setState(chatId.id, State.ContactInput)
        bot.sendMessage(chatId, text = "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    }

    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω
    dispatcher.message(Filter.Text and StateFilter(State.ContactInput.key)) {
        val chatId = ChatId.fromId(message.chat.id)
        val phone = message.text
        val phoneRegex = """^\+?\d{10,14}$""".toRegex()
        if (phone == null || !phone.matches(phoneRegex)) {
            bot.sendMessage(chatId, text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567")
            return@message
        }
        val ctx = StateStorage.getContext(chatId.id)
        ctx.phone = phone

        val available = tableService.getAvailableTables(ctx.clubId!!, ctx.bookingDate!!, ctx.guestCount!!)
        if (available.isEmpty()) {
            bot.sendMessage(chatId, text = "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª-–≤–∞ –≥–æ—Å—Ç–µ–π.")
            StateStorage.clear(chatId.id)
            return@message
        }
        val buttons = available
            .map { InlineKeyboardButton.CallbackData("–°—Ç–æ–ª ‚Ññ${it.number} (–¥–æ ${it.capacity} —á–µ–ª.)", "table_${it.id}") }
            .chunked(2)
        StateStorage.setState(chatId.id, State.TableSelection)
        bot.sendMessage(chatId, text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª:", replyMarkup = InlineKeyboardMarkup.create(buttons))
    }
}