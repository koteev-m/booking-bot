package com.bookingbot.gateway.handlers

import com.bookingbot.api.model.booking.BookingRequest
import com.bookingbot.api.services.BookingService
import com.bookingbot.api.services.ClubService
import com.bookingbot.api.services.TableService
import com.bookingbot.gateway.Bot
import com.bookingbot.gateway.fsm.State
import com.bookingbot.gateway.fsm.StateStorage
import com.bookingbot.gateway.markup.CalendarKeyboard
import com.bookingbot.gateway.markup.Menus
import com.bookingbot.gateway.util.CallbackData
import com.bookingbot.gateway.util.StateFilter
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.extensions.filters.Filter
import java.time.LocalDate
import java.time.ZoneId
import java.time.format.DateTimeFormatter

fun addBookingHandlers(
    dispatcher: Dispatcher,
    clubService: ClubService,
    tableService: TableService,
    bookingService: BookingService
) {

    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–í—ã–±—Ä–∞—Ç—å –∫–ª—É–±"
    dispatcher.callbackQuery(CallbackData.SELECT_CLUB) {
        val chatId = ChatId.fromId(callbackQuery.message!!.chat.id)
        val clubs = clubService.getAllClubs()
        val clubButtons = clubs.map { InlineKeyboardButton.CallbackData(it.name, "${CallbackData.SHOW_CLUB_PREFIX}${it.id}") }.chunked(2)
        bot.sendMessage(chatId, text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:", replyMarkup = InlineKeyboardMarkup.create(clubButtons))
    }

    // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    dispatcher.callbackQuery {
        val chatId = ChatId.fromId(callbackQuery.message!!.chat.id)
        val data = callbackQuery.data

        when {
            // –®–∞–≥ 2: –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–ª—É–±–∞
            data.startsWith(CallbackData.SHOW_CLUB_PREFIX) -> {
                val clubId = data.removePrefix(CallbackData.SHOW_CLUB_PREFIX).toIntOrNull() ?: return@callbackQuery
                val club = clubService.findClubById(clubId) ?: return@callbackQuery
                bot.sendMessage(
                    chatId = chatId,
                    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: *${club.name}*",
                    parseMode = ParseMode.MARKDOWN,
                    replyMarkup = Menus.clubMenu(clubId)
                )
            }

            // –®–∞–≥ 3: –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
            data.startsWith(CallbackData.START_BOOKING_PREFIX) -> {
                val clubId = data.removePrefix(CallbackData.START_BOOKING_PREFIX).toIntOrNull() ?: return@callbackQuery
                StateStorage.getContext(chatId.id).clubId = clubId
                StateStorage.setState(chatId.id, State.DateSelection)
                val today = LocalDate.now()

                val calendarMarkup = CalendarKeyboard.create(today.year, today.monthValue)
                val keyboardWithBack = calendarMarkup.inlineKeyboard.toMutableList().apply {
                    add(listOf(Menus.backToMainMenuButton))
                }
                bot.sendMessage(
                    chatId = chatId,
                    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
                    replyMarkup = InlineKeyboardMarkup.create(keyboardWithBack)
                )
            }

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            data.startsWith(CallbackData.CALENDAR_PREV_PREFIX) || data.startsWith(CallbackData.CALENDAR_NEXT_PREFIX) -> {
                val parts = data.split("_")
                val direction = parts[1]
                val yearMonth = java.time.YearMonth.parse(parts[2])
                val newYearMonth = if (direction == "prev") yearMonth.minusMonths(1) else yearMonth.plusMonths(1)

                val calendarMarkup = CalendarKeyboard.create(newYearMonth.year, newYearMonth.monthValue)
                val keyboardWithBack = calendarMarkup.inlineKeyboard.toMutableList().apply {
                    add(listOf(Menus.backToMainMenuButton))
                }

                bot.editMessageReplyMarkup(
                    chatId = chatId,
                    messageId = callbackQuery.message!!.messageId,
                    replyMarkup = InlineKeyboardMarkup.create(keyboardWithBack)
                )
            }

            // –í—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            data.startsWith(CallbackData.CALENDAR_DAY_PREFIX) -> {
                if (StateStorage.getState(chatId.id) != State.DateSelection.key) return@callbackQuery
                val date = LocalDate.parse(data.removePrefix(CallbackData.CALENDAR_DAY_PREFIX))
                StateStorage.getContext(chatId.id).bookingDate = date.atStartOfDay(ZoneId.systemDefault()).toInstant()
                StateStorage.setState(chatId.id, State.GuestCountInput)
                bot.deleteMessage(chatId, callbackQuery.message!!.messageId)
                bot.sendMessage(chatId, text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: $date. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?")
            }

            // –®–∞–≥ 6: –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
            data.startsWith(CallbackData.TABLE_PREFIX) -> {
                if (StateStorage.getState(chatId.id) != State.TableSelection.key) return@callbackQuery
                val tableId = data.removePrefix(CallbackData.TABLE_PREFIX).toInt()
                val context = StateStorage.getContext(chatId.id)
                context.tableId = tableId

                val club = clubService.findClubById(context.clubId!!)
                val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy").withZone(ZoneId.systemDefault())
                val depositAmount = tableService.calculateDeposit(tableId, context.guestCount!!)

                val staffInfo = if (context.source != null && context.source != "–ë–æ—Ç") {
                    """
                    - *–ò–º—è –≥–æ—Å—Ç—è:* ${context.bookingGuestName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                    - *–¢–µ–ª–µ—Ñ–æ–Ω:* ${context.phone ?: "–ù–µ —É–∫–∞–∑–∞–Ω"}
                    - *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${context.source}
                    """.trimIndent()
                } else {
                    ""
                }

                val confirmationText = """
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –±—Ä–æ–Ω—å:
                    - *–ö–ª—É–±:* ${club?.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
                    - *–°—Ç–æ–ª ID:* ${context.tableId}
                    - *–ì–æ—Å—Ç–µ–π:* ${context.guestCount}
                    - *–î–∞—Ç–∞:* ${formatter.format(context.bookingDate!!)}
                    - *–î–µ–ø–æ–∑–∏—Ç:* ${depositAmount.toInt()} —Ä—É–±.
                    $staffInfo
                """.trimIndent()

                val confirmationButtons = InlineKeyboardMarkup.create(
                    listOf(
                        InlineKeyboardButton.CallbackData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", CallbackData.CONFIRM_BOOKING),
                        InlineKeyboardButton.CallbackData("‚ùå –û—Ç–º–µ–Ω–∞", CallbackData.CANCEL_BOOKING_FSM)
                    )
                )
                StateStorage.setState(chatId.id, State.Confirmation)
                bot.editMessageText(
                    chatId = chatId,
                    messageId = callbackQuery.message!!.messageId,
                    text = confirmationText,
                    replyMarkup = confirmationButtons,
                    parseMode = ParseMode.MARKDOWN
                )
            }

            // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            data == CallbackData.CONFIRM_BOOKING -> {
                if (StateStorage.getState(chatId.id) != State.Confirmation.key) return@callbackQuery
                val context = StateStorage.getContext(chatId.id)

                val guestName = if (context.promoterId != null || (context.source != null && context.source != "–ë–æ—Ç")) {
                    context.bookingGuestName
                } else {
                    callbackQuery.from.username
                }

                val request = BookingRequest(
                    userId = chatId.id,
                    clubId = context.clubId!!,
                    tableId = context.tableId!!,
                    bookingTime = context.bookingDate!!,
                    partySize = context.guestCount!!,
                    bookingGuestName = guestName,
                    promoterId = context.promoterId,
                    bookingSource = context.source ?: "–ë–æ—Ç",
                    phone = context.phone,
                    telegramId = chatId.id
                )
                val booking = bookingService.createBooking(request)
                bot.editMessageText(chatId, callbackQuery.message!!.messageId, text = "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –±—Ä–æ–Ω—å ‚Ññ${booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

                val club = clubService.findClubById(context.clubId!!)
                val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm").withZone(ZoneId.systemDefault())

                // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –∫–ª—É–±–∞
                club?.adminChannelId?.let { channelId ->
                    val notificationText = """
                        üîî *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å!*
                        *–ö–ª—É–±:* ${club.name}
                        *ID –±—Ä–æ–Ω–∏:* ${booking.id}
                        *–ì–æ—Å—Ç—å:* @${booking.bookingGuestName ?: "N/A"}
                        *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:* ${booking.partySize}
                        *–°—Ç–æ–ª ID:* ${booking.tableId}
                        *–í—Ä–µ–º—è:* ${formatter.format(booking.bookingTime)}
                    """.trimIndent()

                    val adminKeyboard = InlineKeyboardMarkup.create(
                        listOf(
                            InlineKeyboardButton.CallbackData("‚úÖ –ì–æ—Å—Ç–∏ –ø—Ä–∏—à–ª–∏", "${CallbackData.ADMIN_CONFIRM_PREFIX}${booking.id}"),
                            InlineKeyboardButton.CallbackData("‚ùå –ù–µ—è–≤–∫–∞", "${CallbackData.ADMIN_NOSHOW_PREFIX}${booking.id}"),
                            InlineKeyboardButton.CallbackData("üö´ –û—Ç–º–µ–Ω–∏—Ç—å (–ú–µ–Ω–µ–¥–∂–µ—Ä)", "${CallbackData.ADMIN_CANCEL_PREFIX}${booking.id}")
                        )
                    )

                    bot.sendMessage(
                        chatId = ChatId.fromId(channelId),
                        text = notificationText,
                        parseMode = ParseMode.MARKDOWN,
                        replyMarkup = adminKeyboard
                    )
                }

                // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –£–ü–†–ê–í–õ–Ø–Æ–©–ò–• (–≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª)
                val generalNotificationText = """
                    üåê *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å (–û–±—â–∞—è —Å–≤–æ–¥–∫–∞)*
                    
                    *–ö–ª—É–±:* ${club?.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
                    *ID –±—Ä–æ–Ω–∏:* ${booking.id}
                    *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${booking.bookingSource}
                    *–ì–æ—Å—Ç—å:* @${booking.bookingGuestName ?: "N/A"}
                    *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:* ${booking.partySize}
                    *–°—Ç–æ–ª ID:* ${booking.tableId}
                    *–í—Ä–µ–º—è:* ${formatter.format(booking.bookingTime)}
                """.trimIndent()

                bot.sendMessage(
                    chatId = ChatId.fromId(Bot.GENERAL_ADMIN_CHANNEL_ID),
                    text = generalNotificationText,
                    parseMode = ParseMode.MARKDOWN
                )

                StateStorage.clear(chatId.id)
            }

            // –û—Ç–º–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ FSM
            data == CallbackData.CANCEL_BOOKING_FSM -> {
                bot.editMessageText(chatId, callbackQuery.message!!.messageId, text = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                StateStorage.clear(chatId.id)
            }
        }
    }

    // –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, –ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
    dispatcher.message(Filter.Text and StateFilter(State.GuestCountInput.key)) {
        val chatId = ChatId.fromId(message.chat.id)
        val guestCount = message.text?.toIntOrNull()
        if (guestCount == null || guestCount <= 0) {
            bot.sendMessage(chatId, text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π.")
            return@message
        }
        val context = StateStorage.getContext(chatId.id)
        context.guestCount = guestCount

        StateStorage.setState(chatId.id, State.ContactInput)
        bot.sendMessage(chatId, text = "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    }

    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª—ã
    dispatcher.message(Filter.Text and StateFilter(State.ContactInput.key)) {
        val chatId = ChatId.fromId(message.chat.id)
        val phone = message.text

        val phoneRegex = """^\+?\d{10,14}$""".toRegex()
        if (phone == null || !phone.matches(phoneRegex)) {
            bot.sendMessage(chatId, text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567")
            return@message
        }

        val context = StateStorage.getContext(chatId.id)
        context.phone = phone

        val tables = tableService.getAvailableTables(context.clubId!!, context.bookingDate!!, context.guestCount!!)
        if (tables.isEmpty()) {
            bot.sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.")
            StateStorage.clear(chatId.id)
            return@message
        }

        val tableButtons = tables.map {
            val deposit = tableService.calculateDeposit(it.id, context.guestCount!!)
            InlineKeyboardButton.CallbackData(
                "–°—Ç–æ–ª ‚Ññ${it.number} (–¥–æ ${it.capacity} —á–µ–ª., –¥–µ–ø–æ–∑–∏—Ç –æ—Ç ${deposit.toInt()} —Ä—É–±.)",
                "${CallbackData.TABLE_PREFIX}${it.id}"
            )
        }.chunked(2)
        StateStorage.setState(chatId.id, State.TableSelection)
        bot.sendMessage(chatId, text = "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª:", replyMarkup = InlineKeyboardMarkup.create(tableButtons))
    }
}