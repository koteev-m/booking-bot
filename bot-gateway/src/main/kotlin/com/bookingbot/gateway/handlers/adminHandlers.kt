package com.bookingbot.gateway.handlers

import com.bookingbot.api.model.UserRole
import com.bookingbot.api.services.ClubService
import com.bookingbot.api.services.UserService
import com.bookingbot.gateway.Bot.OWNER_IDS // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode

fun addAdminHandlers(dispatcher: Dispatcher, userService: UserService, clubService: ClubService) {

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    dispatcher.command("answer") {
        val adminId = message.from?.id ?: return@command
        val admin = userService.findOrCreateUser(adminId, null)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü
        if (admin.role != UserRole.ADMIN && admin.role != UserRole.OWNER) {
            bot.sendMessage(ChatId.fromId(adminId), "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return@command
        }

        // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /answer <userId> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>
        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size < 3) {
            bot.sendMessage(
                ChatId.fromId(adminId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/answer <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>`",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        if (targetUserId == null) {
            bot.sendMessage(ChatId.fromId(adminId), "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return@command
        }

        val answerText = commandParts.drop(2).joinToString(" ")

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        val result = bot.sendMessage(
            chatId = ChatId.fromId(targetUserId),
            text = "üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n\n$answerText",
            parseMode = ParseMode.MARKDOWN
        )

        if (result.isSuccess) {
            bot.sendMessage(ChatId.fromId(adminId), "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $targetUserId.")
        } else {
            bot.sendMessage(ChatId.fromId(adminId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
    dispatcher.command("setrole") {
        val requesterId = message.from?.id ?: return@command

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        if (requesterId !in OWNER_IDS) {
            bot.sendMessage(ChatId.fromId(requesterId), "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
            return@command
        }

        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size != 3) {
            bot.sendMessage(
                ChatId.fromId(requesterId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setrole <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <ROLE>`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: GUEST, PROMOTER, ADMIN",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        val roleName = commandParts[2].uppercase()

        if (targetUserId == null) {
            bot.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return@command
        }

        val newRole = try {
            UserRole.valueOf(roleName)
        } catch (e: IllegalArgumentException) {
            bot.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: GUEST, PROMOTER, ADMIN.")
            return@command
        }

        if (userService.updateUserRole(targetUserId, newRole)) {
            bot.sendMessage(ChatId.fromId(requesterId), "‚úÖ –†–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $targetUserId —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ $newRole.")
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ —Ä–æ–ª–∏
            bot.sendMessage(ChatId.fromId(targetUserId), "–í–∞–º –±—ã–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: *$newRole*", parseMode = ParseMode.MARKDOWN)
        } else {
            bot.sendMessage(ChatId.fromId(requesterId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID $targetUserId.")
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∫ –∫–ª—É–±—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
    dispatcher.command("addstaff") {
        val requesterId = message.from?.id ?: return@command

        if (requesterId !in OWNER_IDS) {
            bot.sendMessage(ChatId.fromId(requesterId), "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
            return@command
        }

        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size != 4) {
            bot.sendMessage(
                ChatId.fromId(requesterId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/addstaff <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <ID –∫–ª—É–±–∞> <ROLE>`\n–†–æ–ª–∏: ADMIN, PROMOTER",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        val targetClubId = commandParts[2].toIntOrNull()
        val roleName = commandParts[3].uppercase()

        if (targetUserId == null || targetClubId == null) {
            bot.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–ª—É–±–∞.")
            return@command
        }

        val role = try {
            UserRole.valueOf(roleName)
        } catch (e: Exception) { null }

        if (role != UserRole.ADMIN && role != UserRole.PROMOTER) {
            bot.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ADMIN, PROMOTER.")
            return@command
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—É–±
        if (clubService.findClubById(targetClubId) == null) {
            bot.sendMessage(ChatId.fromId(requesterId), "–ö–ª—É–± —Å ID $targetClubId –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return@command
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –ë–î
        userService.findOrCreateUser(targetUserId, null)

        if (userService.assignUserToClub(targetUserId, targetClubId, role)) {
            bot.sendMessage(ChatId.fromId(requesterId), "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $targetUserId —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å $role –≤ –∫–ª—É–±–µ $targetClubId.")
            bot.sendMessage(ChatId.fromId(targetUserId), "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å *$role* –¥–ª—è –∫–ª—É–±–∞ (ID: $targetClubId).", parseMode = ParseMode.MARKDOWN)
        } else {
            bot.sendMessage(ChatId.fromId(requesterId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        }
    }
}
