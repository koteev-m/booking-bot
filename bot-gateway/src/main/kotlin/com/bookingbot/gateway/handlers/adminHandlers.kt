package com.bookingbot.gateway.handlers
import com.bookingbot.gateway.TelegramApi

import com.bookingbot.api.model.UserRole
import com.bookingbot.api.services.ClubService
import com.bookingbot.api.services.UserService
import com.bookingbot.gateway.Bot
import com.bookingbot.gateway.fsm.State
import com.bookingbot.gateway.fsm.StateStorage
import com.bookingbot.gateway.util.StateFilter
import com.bookingbot.gateway.util.CallbackData
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.extensions.filters.Filter

fun addAdminHandlers(dispatcher: Dispatcher, userService: UserService, clubService: ClubService) {

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤–æ–ø—Ä–æ—Å
    dispatcher.command("answer") {
        val adminId = message.from?.id ?: return@command
        val admin = userService.findOrCreateUser(adminId, null)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü
        if (admin.role != UserRole.ADMIN && admin.role != UserRole.OWNER) {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return@command
        }

        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size < 3) {
            TelegramApi.sendMessage(
                ChatId.fromId(adminId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/answer <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>`",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        if (targetUserId == null) {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return@command
        }

        val answerText = commandParts.drop(2).joinToString(" ")

        val result = TelegramApi.sendMessage(
            chatId = ChatId.fromId(targetUserId),
            text = "üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n\n$answerText",
            parseMode = ParseMode.MARKDOWN
        )

        if (result.isSuccess) {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $targetUserId.")
        } else {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
    dispatcher.command("setrole") {
        val requesterId = message.from?.id ?: return@command

        if (requesterId !in Bot.OWNER_IDS) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
            return@command
        }

        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size != 3) {
            TelegramApi.sendMessage(
                ChatId.fromId(requesterId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setrole <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <ROLE>`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: GUEST, PROMOTER, ADMIN, OWNER",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        val roleName = commandParts[2].uppercase()

        if (targetUserId == null) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return@command
        }

        val newRole = try {
            UserRole.valueOf(roleName)
        } catch (e: IllegalArgumentException) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: GUEST, PROMOTER, ADMIN, OWNER.")
            return@command
        }

        if (userService.updateUserRole(targetUserId, newRole)) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "‚úÖ –†–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $targetUserId —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ $newRole.")
            TelegramApi.sendMessage(ChatId.fromId(targetUserId), "–í–∞–º –±—ã–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: *$newRole*", parseMode = ParseMode.MARKDOWN)
        } else {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID $targetUserId.")
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∫ –∫–ª—É–±—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
    dispatcher.command("addstaff") {
        val requesterId = message.from?.id ?: return@command

        if (requesterId !in Bot.OWNER_IDS) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
            return@command
        }

        val commandParts = message.text?.split(" ") ?: return@command
        if (commandParts.size != 4) {
            TelegramApi.sendMessage(
                ChatId.fromId(requesterId),
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/addstaff <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <ID –∫–ª—É–±–∞> <ROLE>`\n–†–æ–ª–∏: ADMIN, PROMOTER",
                parseMode = ParseMode.MARKDOWN
            )
            return@command
        }

        val targetUserId = commandParts[1].toLongOrNull()
        val targetClubId = commandParts[2].toIntOrNull()
        val roleName = commandParts[3].uppercase()

        if (targetUserId == null || targetClubId == null) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–ª—É–±–∞.")
            return@command
        }

        val role = try { UserRole.valueOf(roleName) } catch (e: Exception) { null }

        if (role != UserRole.ADMIN && role != UserRole.PROMOTER) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ADMIN, PROMOTER.")
            return@command
        }

        if (clubService.findClubById(targetClubId) == null) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "–ö–ª—É–± —Å ID $targetClubId –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return@command
        }

        userService.findOrCreateUser(targetUserId, null)

        if (userService.assignUserToClub(targetUserId, targetClubId, role)) {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $targetUserId —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å $role –≤ –∫–ª—É–±–µ $targetClubId.")
            TelegramApi.sendMessage(ChatId.fromId(targetUserId), "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å *$role* –¥–ª—è –∫–ª—É–±–∞ (ID: $targetClubId).", parseMode = ParseMode.MARKDOWN)
        } else {
            TelegramApi.sendMessage(ChatId.fromId(requesterId), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏ –≤—Ä—É—á–Ω—É—é
    dispatcher.command("createbooking") {
        val adminId = message.from?.id ?: return@command
        val admin = userService.findOrCreateUser(adminId, null)

        if (admin.role != UserRole.ADMIN && admin.role != UserRole.OWNER) {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return@command
        }

        StateStorage.setState(adminId, State.AdminBookingGuestName)
        TelegramApi.sendMessage(ChatId.fromId(adminId), "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Å—Ç—è:")
    }

    // –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –∏–º—è –≥–æ—Å—Ç—è
    dispatcher.message(Filter.Text and StateFilter(State.AdminBookingGuestName.key)) {
        val adminId = message.from?.id ?: return@message
        val guestName = message.text ?: return@message

        StateStorage.getContext(adminId).bookingGuestName = guestName
        StateStorage.setState(adminId, State.AdminBookingSource)
        TelegramApi.sendMessage(ChatId.fromId(adminId), "–ò–º—è –≥–æ—Å—Ç—è '$guestName' –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–≤–æ–Ω–æ–∫', 'Instagram'):")
    }

    // –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏
    dispatcher.message(Filter.Text and StateFilter(State.AdminBookingSource.key)) {
        val adminId = message.from?.id ?: return@message
        val source = message.text ?: return@message

        StateStorage.getContext(adminId).source = source
        StateStorage.setState(adminId, State.AdminBookingPhone)
        TelegramApi.sendMessage(ChatId.fromId(adminId), "–ò—Å—Ç–æ—á–Ω–∏–∫ '$source' –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≥–æ—Å—Ç—è:")
    }

    // –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≥–æ—Å—Ç—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª—É–±–∞
    dispatcher.message(Filter.Text and StateFilter(State.AdminBookingPhone.key)) {
        val adminId = message.from?.id ?: return@message
        val phone = message.text

        val phoneRegex = """^\+?\d{10,14}$""".toRegex()
        if (phone == null || !phone.matches(phoneRegex)) {
            TelegramApi.sendMessage(ChatId.fromId(adminId), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567")
            return@message
        }

        StateStorage.getContext(adminId).phone = phone

        // <<< –ù–ê–ß–ê–õ–û: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞
        val clubs = clubService.getAllClubs()
        val clubButtons = clubs.map {
            InlineKeyboardButton.CallbackData(it.name, "${CallbackData.SHOW_CLUB_PREFIX}${it.id}")
        }.chunked(2)

        TelegramApi.sendMessage(
            chatId = ChatId.fromId(adminId),
            text = "–¢–µ–ª–µ—Ñ–æ–Ω '$phone' –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            replyMarkup = InlineKeyboardMarkup.create(clubButtons)
        )
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞, —á—Ç–æ–±—ã FSM –≥–æ—Å—Ç—è –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –¥–∏–∞–ª–æ–≥
        StateStorage.setState(adminId, State.ClubSelection)
        // <<< –ö–û–ù–ï–¶: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ –∫–ª—É–±–∞
    }
}
